---
title: "Titanic Dataset Analysis"
author: "Hans Jacob Westbye"
date: "2023-03-21"
output: html_document
---

```{r setup, include=FALSE}
library(titanic)
library(ggplot2)
library(tidyverse)
library(caret)
library(pROC)
library(kknn)
```

## Loading and inspecting the dataset
```{r}
data("titanic_train")
data("titanic_test")

head(titanic_train)
```

```{r}
# Check the structure of the dataset
str(titanic_train)

# Get summary statistics
summary(titanic_train)
```

## Visualizations of the dataset

**Example 1: Bar plot of passenger survival**
```{r}
titanic_train %>%
  ggplot(aes(x = factor(Survived))) +
  geom_bar(fill = "steelblue", alpha = 0.8) +
  scale_x_discrete(labels = c("Perished", "Survived")) +
  labs(x = "Survival", y = "Number of Passengers", title = "Passenger Survival") +
  theme_minimal()
```

**Example 2: Bar plot of passenger class distribution**
```{r}
titanic_train %>%
  ggplot(aes(x = factor(Pclass))) +
  geom_bar(fill = "darkorange", alpha = 0.8) +
  scale_x_discrete(labels = c("1st Class", "2nd Class", "3rd Class")) +
  labs(x = "Passenger Class", y = "Number of Passengers", title = "Passenger Class Distribution") +
  theme_minimal()
```

**Example 3: Box plot of passenger age by class and survival**
```{r}
titanic_train %>%
  ggplot(aes(x = factor(Pclass), y = Age, fill = factor(Survived))) +
  geom_boxplot(alpha = 0.8) +
  scale_fill_manual(values = c("red", "forestgreen"), labels = c("Perished", "Survived")) +
  scale_x_discrete(labels = c("1st Class", "2nd Class", "3rd Class")) +
  labs(x = "Passenger Class", y = "Age", fill = "Survival", title = "Passenger Age by Class and Survival") +
  theme_minimal()
```

**Example 4: Box plot of passenger age by sex, class, and survival**
```{r}
titanic_train %>%
  ggplot(aes(x = factor(Pclass), y = Age, fill = factor(Survived))) +
  geom_boxplot(alpha = 0.8) +
  scale_fill_manual(values = c("red", "forestgreen"), labels = c("Perished", "Survived")) +
  scale_x_discrete(labels = c("1st Class", "2nd Class", "3rd Class")) +
  facet_wrap(~ Sex) +
  labs(x = "Passenger Class", y = "Age", fill = "Survival", title = "Passenger Age by Sex, Class, and Survival") +
  theme_minimal()
```

**Example 5: Stacked bar plot of passenger count by sex, class, and survival**
```{r}
titanic_train %>%
  ggplot(aes(x = factor(Pclass), fill = factor(Survived))) +
  geom_bar(position = "fill", alpha = 0.8) +
  scale_fill_manual(values = c("red", "forestgreen"), labels = c("Perished", "Survived")) +
  scale_x_discrete(labels = c("1st Class", "2nd Class", "3rd Class")) +
  facet_wrap(~ Sex) +
  labs(x = "Passenger Class", y = "Proportion", fill = "Survival", title = "Passenger Count by Sex, Class, and Survival") +
  theme_minimal()
```

## Machine learning models
### Generalized linear model
**1: Data preparation**
```{r}
# Handle missing values
titanic_train$Age[is.na(titanic_train$Age)] <- median(titanic_train$Age, na.rm = TRUE)
titanic_train$Embarked[is.na(titanic_train$Embarked)] <- "S"

# Encode categorical variables
titanic_train$Sex <- as.numeric(factor(titanic_train$Sex))
titanic_train$Embarked <- as.numeric(factor(titanic_train$Embarked))

# Split the data into training and validation sets
set.seed(42)
train_indices <- sample(1:nrow(titanic_train), 0.8 * nrow(titanic_train))
train_data <- titanic_train[train_indices, ]
validation_data <- titanic_train[-train_indices, ]
```

**2: Fit the GLM**
```{r}
# Fit the generalized linear model
glm_model <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
                 family = binomial(link = "logit"),
                 data = train_data)

# Display the model summary
summary(glm_model)
```

**3: Evaluate the model**
```{r}
# Predict on the validation set
validation_data$predicted_prob <- predict(glm_model, validation_data, type = "response")
validation_data$predicted_class <- ifelse(validation_data$predicted_prob > 0.5, 1, 0)

# Calculate accuracy
accuracy <- mean(validation_data$predicted_class == validation_data$Survived)
accuracy
```

**4: Confusion matrix visualization**
```{r}
# Create confusion matrix
confusion_matrix <- confusionMatrix(as.factor(validation_data$predicted_class), as.factor(validation_data$Survived))

# Create confusion matrix plot
cm_plot <- ggplot(data = as.data.frame(confusion_matrix$table), aes(x = Reference, y = Prediction)) +
  geom_tile(aes(fill = log(Freq)), color = "white") +
  geom_text(aes(label = Freq), color = "white", fontface = "bold", size = 15) +
  scale_fill_gradient(low = "blue", high = "red") +
  theme_minimal() +
  theme(axis.title = element_text(size = 12),
        axis.text = element_text(size = 10)) +
  labs(x = "Actual", y = "Predicted", fill = "Log Frequency", title = "Confusion Matrix")

cm_plot
```

**5:ROC curve visualization**
```{r}
# Calculate the ROC curve
roc_obj <- roc(validation_data$Survived, validation_data$predicted_prob)

# Create ROC curve plot
roc_plot <- ggroc(roc_obj, legacy.axes = TRUE) +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
  theme_minimal() +
  labs(x = "False Positive Rate", y = "True Positive Rate", title = "ROC Curve",
       subtitle = paste("AUC =", round(auc(roc_obj), 2)))

roc_plot
```

include=FALSE
### k-Nearest Neighbours (k-NN)

**1: Fit the model**
```{r}
# Scale and center the predictors
train_scaled <- scale(train_data[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")])
validation_scaled <- scale(validation_data[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")], center = attr(train_scaled, "scaled:center"), scale = attr(train_scaled, "scaled:scale"))

# Fit the k-NN model
knn_model <- kknn(Survived ~ ., data.frame(Survived = train_data$Survived, train_scaled), k = 5)

# Display the model summary
summary(knn_model)


```

**2: Make predictions and calculate accuracy**
```{r}
# Make predictions on the validation set
validation_data$predicted_knn_prob <- predict(knn_model, newdata = data.frame(validation_scaled), type = "prob")[, 2]
validation_data$predicted_knn_class <- ifelse(validation_data$predicted_knn_prob > 0.5, 1, 0)


# Calculate accuracy
accuracy_knn <- mean(validation_data$predicted_class_knn == validation_data$Survived)
accuracy_knn
```

**3: Confusion Matrix**
```{r}
# Create confusion matrix for k-NN model
confusion_matrix_knn <- confusionMatrix(as.factor(validation_data$predicted_class_knn), as.factor(validation_data$Survived))

# Visualize the confusion matrix
cm_plot_knn <- ggplot(data = as.data.frame(confusion_matrix_knn$table), aes(x = Reference, y = Prediction)) +
  geom_tile(aes(fill = log(Freq)), color = "white") +
  geom_text(aes(label = Freq), color = "white", fontface = "bold", size = 15) +
  scale_fill_gradient(low = "blue", high = "red") +
  theme_minimal() +
  theme(axis.title = element_text(size = 12),
        axis.text = element_text(size = 10)) +
  labs(x = "Actual", y = "Predicted", fill = "Log Frequency", title = "Confusion Matrix (k-NN)")

cm_plot_knn
```

**4: ROC curve**
```{r}
# Calculate the ROC curve for k-NN
roc_obj_knn <- roc(validation_data$Survived, validation_data$predicted_prob_knn)

# Create ROC curve plot for k-NN
roc_plot_knn <- ggroc(roc_obj_knn, legacy.axes = TRUE) +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
  theme_minimal() +
  labs(x = "False Positive Rate", y = "True Positive Rate", title = "ROC Curve (k-NN)",
       subtitle = paste("AUC =", round(auc(roc_obj_knn), 2)))

roc_plot_knn
```
